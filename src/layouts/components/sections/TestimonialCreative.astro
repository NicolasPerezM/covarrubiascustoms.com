---
import "swiper/css/bundle";
import StackedSplit from "../widgets/StackedSplit.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import { markdownify } from "@/lib/utils/textConverter";
import overrideObjects from "@/lib/utils/overrideObjects.ts";
import OptimizedImage from "../utilities/OptimizedImage.astro";
import type { testimonialSectionSchema } from "@/sections.schema";
import type { z } from "astro/zod";

// Type for this section data
type TestimonialInterface = NonNullable<
  z.infer<typeof testimonialSectionSchema>
>;

type Props = {
  content?: TestimonialInterface;
};

// Fetching the default content for the this section
let defaultContent = (
  await getEntryCTM("sections", "testimonial", Astro.currentLocale)
)?.data as TestimonialInterface;

// Enables content customization (e.g., title, description) with a fallback to 'defaultContent' if not provided.
// The 'content' prop should match the structure of 'defaultContent'.
// Allows using this section with different content across multiple pages.
// If 'content' is missing, 'defaultContent' will be used.
let actualContent = overrideObjects(
  { ...defaultContent },
  Astro.props.content,
) as TestimonialInterface;

// Extracting required values from 'content' object
let {
  enable = true,
  title,
  image,
  imagePosition,
  list,
} = actualContent as TestimonialInterface;

if (!enable) {
  return null;
}
---

<StackedSplit image={image} direction={imagePosition}>
  <div class="space-y-10">
    {
      title && (
        <h2 class="text-h1-sm md:text-h1" set:html={markdownify(title)} />
      )
    }
    {/* Testimonial Content */}
    <div id="testimonial-slider" class="swiper max-md:pb-10!">
      <OptimizedImage
        class="mb-4"
        src="/images/testimonial/quote.svg"
        alt="icon"
      />
      <div class="swiper-wrapper relative">
        {
          list?.map((item) => (
            <div class="swiper-slide">
              <p
                class="mt-4/normal md:text-xl/normal"
                set:html={markdownify(item.content)}
              />
              <div class="font-secondary mt-12 space-y-2 font-medium">
                {item.customer.name && (
                  <h3
                    class="text-h5"
                    set:html={markdownify(item.customer.name)}
                  />
                )}
                {item.customer.role && (
                  <p
                    class="md:text-lg"
                    set:html={markdownify(item.customer.role)}
                  />
                )}
              </div>
            </div>
          ))
        }
      </div>
      <div
        class="swiper-pagination testimonial-pagination flex justify-end [--swiper-pagination-bullet-inactive-opacity:1] [--swiper-pagination-color:var(--color-primary)] max-md:justify-start max-md:[--swiper-pagination-bottom:0px] [&_.swiper-pagination-bullet:not(.swiper-pagination-bullet-active)]:border [&_.swiper-pagination-bullet:not(.swiper-pagination-bullet-active)]:bg-transparent!">
      </div>
    </div>
  </div>

  <script>
    window.addEventListener("load", async function () {
      const { Swiper } = await import("swiper");
      const { Autoplay, Pagination } = await import("swiper/modules");

      // Initialize banner Swiper
      const testimonialSlider = document.querySelector(
        "#testimonial-slider",
      ) as HTMLElement;

      // Initialize content Swiper with navigation
      new Swiper(testimonialSlider, {
        modules: [Autoplay, Pagination],
        speed: 800,
        spaceBetween: 100,
        slidesPerView: 1,
        pagination: {
          el: ".testimonial-pagination",
          clickable: true,
        },
        autoplay: {
          delay: 4000,
          disableOnInteraction: true,
        },
        loop: true,
      });
    });
  </script>
</StackedSplit>
